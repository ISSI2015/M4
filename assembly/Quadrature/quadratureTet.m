function Q = quadratureTet( number )
% Returns a structure containing quadrature nodes and weights as well as their number.

switch number
	case 1,
		weights = 1/6;
		points = [ 1/4 ;...
                              1/4 ;...
                              1/4 ];
		order = 1;
            type = 'Keast rule';
	case 2,
            a = (5+3*sqrt(5))/20;
            b = (5-3*sqrt(5))/20;
		weights = [ 1/24 1/24 1/24 1/24 ];
		points = [ a b b b ; ...
                              b a b b ; ...
                              b b a b ];
		order = 2;
            type = 'Keast rule';
	case 3,
		weights = [ -4/30 9/120 9/120 9/120 9/120];
		points = [ 1/4 1/2 1/6 1/6 1/6 ; ...
                              1/4 1/6 1/2 1/6 1/6 ; ...
                              1/4 1/6 1/6 1/2 1/6 ];
		order = 3;
            type = 'Keast rule';
	case 4,
            a = (1+sqrt(5/14))/4;
            b = (1-sqrt(5/14))/4;
		weights = [ -74/5625 343/45000 343/45000 343/45000 343/45000 56/2250 56/2250 56/2250 56/2250 56/2250 56/2250 ];
		points = [ 1/4 11/14 1/14 1/14 1/14 a a a b b b ; ...
                              1/4 1/14 11/14 1/14 1/14 a b b a a b ; ...
                              1/4 1/14 1/14 11/14 1/14 b a b a b a ];
		order = 4;
            type = 'Keast rule';
      case 5,
            weights = [ ...
                                    0.071937083779018620010, ...
                                    0.071937083779018620010, ...
                                    0.071937083779018620010, ...
                                    0.071937083779018620010, ...
                                    0.069068207226272385281, ...
                                    0.069068207226272385281, ...
                                    0.069068207226272385281, ...
                                    0.069068207226272385281, ...
                                    0.052910052910052910053, ...
                                    0.052910052910052910053, ...
                                    0.052910052910052910053, ...
                                    0.052910052910052910053, ...
                                    0.052910052910052910053, ...
                                    0.052910052910052910053, ...
                                    0.11851851851851851852 ];

            points = [ ...
                                    0.72408676584183090163,  0.091971078052723032789,  0.091971078052723032789; ...
                                    0.091971078052723032789,  0.72408676584183090163,  0.091971078052723032789; ...
                                    0.091971078052723032789,  0.091971078052723032789,  0.72408676584183090163; ...
                                    0.091971078052723032789,  0.091971078052723032789,  0.091971078052723032789; ...
                                    0.040619116511110274837,  0.31979362782962990839,  0.31979362782962990839; ...
                                    0.31979362782962990839,  0.040619116511110274837,  0.31979362782962990839; ...
                                    0.31979362782962990839,  0.31979362782962990839,  0.040619116511110274837; ...
                                    0.31979362782962990839,  0.31979362782962990839,  0.31979362782962990839; ...
                                    0.44364916731037084426,  0.44364916731037084426,  0.056350832689629155741; ...
                                    0.44364916731037084426,  0.056350832689629155741,  0.44364916731037084426; ...
                                    0.44364916731037084426,  0.056350832689629155741,  0.056350832689629155741; ...
                                    0.056350832689629155741,  0.44364916731037084426,  0.44364916731037084426; ...
                                    0.056350832689629155741,  0.44364916731037084426,  0.056350832689629155741; ...
                                    0.056350832689629155741,  0.056350832689629155741,  0.44364916731037084426; ...
                                    0.25000000000000000000,  0.25000000000000000000,  0.25000000000000000000 ]';
            order = 5;
            type = 'Felippa rule';
      case 6,
            weights = [ ...
                                    0.039922750257869636194, ...
                                    0.039922750257869636194, ...
                                    0.039922750257869636194, ...
                                    0.039922750257869636194, ...
                                    0.010077211055345822612, ...
                                    0.010077211055345822612, ...
                                    0.010077211055345822612, ...
                                    0.010077211055345822612, ...
                                    0.055357181543927398338, ...
                                    0.055357181543927398338, ...
                                    0.055357181543927398338, ...
                                    0.055357181543927398338, ...
                                    0.048214285714285714286, ...
                                    0.048214285714285714286, ...
                                    0.048214285714285714286, ...
                                    0.048214285714285714286, ...
                                    0.048214285714285714286, ...
                                    0.048214285714285714286, ...
                                    0.048214285714285714286, ...
                                    0.048214285714285714286, ...
                                    0.048214285714285714286, ...
                                    0.048214285714285714286, ...
                                    0.048214285714285714286, ...
                                    0.048214285714285714286 ];


            points = [ ...
                                    0.35619138622025439121,  0.21460287125991520293,  0.21460287125991520293; ...
                                    0.21460287125991520293,  0.35619138622025439121,  0.21460287125991520293; ...
                                    0.21460287125991520293,  0.21460287125991520293,  0.35619138622025439121; ...
                                    0.21460287125991520293,  0.21460287125991520293,  0.21460287125991520293; ...
                                    0.87797812439616594065,  0.040673958534611353116,  0.040673958534611353116; ...
                                    0.040673958534611353116,  0.87797812439616594065,  0.040673958534611353116; ...
                                    0.040673958534611353116,  0.040673958534611353116,  0.87797812439616594065; ...
                                    0.040673958534611353116,  0.040673958534611353116,  0.040673958534611353116; ...
                                    0.032986329573173468968,  0.32233789014227551034,  0.32233789014227551034; ...
                                    0.32233789014227551034,  0.032986329573173468968,  0.32233789014227551034; ...
                                    0.32233789014227551034,  0.32233789014227551034,  0.032986329573173468968; ...
                                    0.32233789014227551034,  0.32233789014227551034,  0.32233789014227551034; ...
                                    0.60300566479164914137,  0.26967233145831580803,  0.063661001875017525299; ...
                                    0.60300566479164914137,  0.063661001875017525299,  0.26967233145831580803; ...
                                    0.60300566479164914137,  0.063661001875017525299,  0.063661001875017525299; ...
                                    0.063661001875017525299,  0.60300566479164914137,  0.26967233145831580803; ...
                                    0.063661001875017525299,  0.60300566479164914137,  0.063661001875017525299; ...
                                    0.063661001875017525299,  0.063661001875017525299,  0.60300566479164914137; ...
                                    0.26967233145831580803,  0.60300566479164914137,  0.063661001875017525299; ...
                                    0.26967233145831580803,  0.063661001875017525299,  0.60300566479164914137; ...
                                    0.26967233145831580803,  0.063661001875017525299,  0.063661001875017525299; ...
                                    0.063661001875017525299,  0.26967233145831580803,  0.60300566479164914137; ...
                                    0.063661001875017525299,  0.26967233145831580803,  0.063661001875017525299; ...
                                    0.063661001875017525299,  0.063661001875017525299,  0.26967233145831580803 ]';

            order =6 ;
            type = 'Felippa rule';
	otherwise 
		error('There is no such quadrature rule implemented!'); 
end

Q = struct('size', length(weights), 'points', points,'weights', weights, ...
		'order', order, 'type', type);

end